;_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/#
;
;	Module		:VAR_NAYAMI.ERB
;	Facility	:eraAS用悩み関連処理
;
;	Licence		:ライセンスフリー。
;
;	Modification Data:
;
;	Edit	Date			Author					Reason
;	001		2017/03/02		morph					新規作成
;	002		2018/11/14		morph					悩み所持判定関数SEARCH_ALL_NAYAMIを追加
;
;_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/#

;===============================================================================
;  ◇記載関数一覧(記載順)
;
;		Module Name						Explanation
;
; *- xxxx
;
;	・ VAR_NAYAMI_ASSIST_ABLE_LIST		VAR:悩み協力成否判定
;	・ VAR_NAYAMI_ASSIST_ABLE			VAR:個別悩み解決成否判定
;	・ VAR_NAYAMI_EXIST					VAR:悩み事の有無判定
;	・ VAR_NAYAMI_SET_ASSIST			VAR:悩み協力変数制御関数
;	・ SEARCH_ALL_NAYAMI				INFO_TARGET_DETAIL用に作成、所持している悩みを返す
;	・ SEARCH_BIG_NAYAMI				
;	・ SEARCH_SMALL_NAYAMI				
;;
;===============================================================================

;-------------------------------------------------------------------------------
;   xxxx
;-------------------------------------------------------------------------------

;-------------------------------------------------
;悩み協力成否判定
;-------------------------------------------------
;悩み事に協力できるかどうかを判定する
@VAR_NAYAMI_ASSIST_ABLE_LIST(C_ID)
#FUNCTION
#DIM C_ID
#DIM NAYAMI_ID
SIF FLAG:都市_現在TP < 1 && FLAG:都市_現在BP < 1
	RETURNF 0
;現在解決中の悩みがある
SIF CFLAG:C_ID:住人_悩み解決中
	RETURNF 0
;大きな悩み
FOR NAYAMI_ID, 1, 9
	SIF VAR_NAYAMI_ASSIST_ABLE(C_ID, NAYAMI_ID)
		RETURNF 2
NEXT
;小さな悩み
FOR NAYAMI_ID, 11, 19
	SIF VAR_NAYAMI_ASSIST_ABLE(C_ID, NAYAMI_ID)
		RETURNF 1
NEXT
RETURNF 0



;-------------------------------------------------
;個別悩み解決成否判定
;-------------------------------------------------
;個々の悩みの解決可不可
@VAR_NAYAMI_ASSIST_ABLE(C_ID, NAYAMI_ID)
#FUNCTION
#DIM C_ID
#DIM NAYAMI_ID
;悩みがない
SIF CFLAG:C_ID:(4000 + NAYAMI_ID) <= 0
	RETURNF 0
;悩みが判明してない
SIF CFLAG:C_ID:(4100 + NAYAMI_ID) <  100
	RETURNF 0
;そんなに親しくない
SIF NAYAMI_ID <= 10 && CFLAG:C_ID:関係段階 == 0
	RETURNF 0
RETURNF 1



;-------------------------------------------------
;悩み事の有無判定
;-------------------------------------------------
;このままフラグセットにも使いたいので戻り値はやや変則的に
@VAR_NAYAMI_EXIST(C_ID)
#FUNCTION
#DIM C_ID
#DIM NAYAMI_ID
;現在解決中の悩みがある
SIF CFLAG:C_ID:住人_悩み解決中
	RETURNF 0
;大きな悩み
FOR NAYAMI_ID, 1, 9
	SIF CFLAG:C_ID:(4000 + NAYAMI_ID) <= 0
		CONTINUE
	RETURNF 7
NEXT
;小さな悩み
FOR NAYAMI_ID, 11, 19
	SIF CFLAG:C_ID:(4000 + NAYAMI_ID) <= 0
		CONTINUE
	RETURNF 5
NEXT
RETURNF 0



;-------------------------------------------------
;悩み協力変数制御関数
;-------------------------------------------------
;悩み事協力フラグのセット
;現状では関係段階は0~2だが増えても良いように
;VAR_NAYAMI_EXISTの戻り値の最小値を5にした
@VAR_NAYAMI_SET_ASSIST(C_ID)
#DIM C_ID
IF !VAR_NAYAMI_EXIST(C_ID)
	;すでに解決してたら関係段階順
	CFLAG:C_ID:住人_悩み協力状況 = CFLAG:C_ID:関係段階
ELSE
	;解決してない時は関係段階が育ってない人優先
	;多くの女の子と親しくなれるように
	CFLAG:C_ID:住人_悩み協力状況 = VAR_NAYAMI_EXIST(C_ID) - CFLAG:C_ID:関係段階
ENDIF
SIF CFLAG:C_ID:レギュラー
	CFLAG:C_ID:住人_悩み協力状況 ++
SIF CFLAG:C_ID:特別保護
	CFLAG:C_ID:住人_悩み協力状況 ++
SIF CFLAG:C_ID:携帯番号入手
	CFLAG:C_ID:住人_悩み協力状況 ++



;-------------------------------------------------
;悩み解決コスト算出関数
;-------------------------------------------------
;配列を受け取って各プランの実行コストを算出する
@VAR_NAYAMI_PLAN_COST(C_ID, N_ID, COST_AP, COST_MONEY)
#FUNCTION
#DIM  C_ID
#DIM  N_ID
#DIM  REF COST_AP
#DIM  REF COST_MONEY
#DIM  COST_CHARA
#DIM  COST_NAYAMI

COST_CHARA = CFLAG:C_ID:住人_難度
COST_NAYAMI = CFLAG:C_ID:(4300 + N_ID)

;01:"資金寄付　"
COST_AP:1 = 0
COST_MONEY:1 = (COST_NAYAMI * 1000) * COST_CHARA

;02:"法の力　　"
COST_AP:2 = (COST_NAYAMI * 3) * COST_CHARA / 2
COST_MONEY:2 = 0

;03:"治療　　　"
COST_AP:3 = (COST_NAYAMI * 3) * COST_CHARA / 2
COST_MONEY:3 = (COST_NAYAMI * 500) * COST_CHARA

;04:"アドバイス"
COST_AP:4 = (COST_NAYAMI * 1) * COST_CHARA / 2
COST_MONEY:4 = 0

;05:"店の紹介　"
COST_AP:5 = (COST_NAYAMI * 2) * COST_CHARA / 2
COST_MONEY:5 = 0

;06:"励ます　　"
COST_AP:6 = (COST_NAYAMI * 2) * COST_CHARA / 2
COST_MONEY:6 = 0

;07:"教授　　　"
COST_AP:7 = (COST_NAYAMI * 4) * COST_CHARA
COST_MONEY:7 = 0

;08:"噂を流す　"
COST_AP:8 = (COST_NAYAMI * 5) * COST_CHARA / 2
COST_MONEY:8 = 0

;09:"情報操作　"
COST_AP:9 = (COST_NAYAMI * 7) * COST_CHARA / 2
COST_MONEY:9 = 0

;10:"力を尽くす"
COST_AP:10 = (COST_NAYAMI * 10) * COST_CHARA / 2
COST_MONEY:10 = (COST_NAYAMI * 5000) * COST_CHARA



;悩み所持判定
;所持している悩みの悩みスロットを返す
;判定優先順は上から
;・判明済の大きな悩みがある時、200＋悩みスロット(1〜5)
;・判明済の小さな悩みがある時、200＋悩みスロット(11〜15)
;・未判明の大きな悩みがある時、100＋悩みスロット(1〜5)
;・未判明の小さな悩みがある時、100＋悩みスロット(11〜15)
@SEARCH_ALL_NAYAMI(L_I)
#FUNCTION
#DIM L_I
#DIM BIG_NAYAMI
#DIM SMALL_NAYAMI
BIG_NAYAMI = SEARCH_BIG_NAYAMI(L_I)
SIF BIG_NAYAMI >= 200
	RETURNF BIG_NAYAMI
SMALL_NAYAMI = SEARCH_SMALL_NAYAMI(L_I)
SIF SMALL_NAYAMI >= 200
	RETURNF SMALL_NAYAMI
SIF BIG_NAYAMI
	RETURNF BIG_NAYAMI
SIF SMALL_NAYAMI
	RETURNF SMALL_NAYAMI
RETURNF 

@SEARCH_BIG_NAYAMI(L_I)
#FUNCTION
#DIM L_I
#DIM NAYAMI_SLOT
#DIM NAYAMI_EXIST  = 4000;CFLAGの参照用でござる
#DIM NAYAMI_DETECT = 4100;
#DIM NAYAMI_SOLVE  = 4200;
FOR NAYAMI_SLOT, 1, 6
	SIF !CFLAG:L_I:(NAYAMI_EXIST + NAYAMI_SLOT)
		CONTINUE
	IF CFLAG:L_I:(NAYAMI_DETECT + NAYAMI_SLOT) >= 100
		RETURNF 200 + NAYAMI_SLOT 
	ELSE
		RETURNF 100 + NAYAMI_SLOT
	ENDIF
NEXT
RETURNF

@SEARCH_SMALL_NAYAMI(L_I)
#FUNCTION
#DIM L_I
#DIM NAYAMI_SLOT
#DIM NAYAMI_EXIST  = 4000;CFLAGの参照用でござる
#DIM NAYAMI_DETECT = 4100;
#DIM NAYAMI_SOLVE  = 4200;
FOR NAYAMI_SLOT, 11, 16
	SIF !CFLAG:L_I:(NAYAMI_EXIST + NAYAMI_SLOT)
		CONTINUE
	IF CFLAG:L_I:(NAYAMI_DETECT + NAYAMI_SLOT) >= 100
		RETURNF 200 + NAYAMI_SLOT 
	ELSE
		RETURNF 100 + NAYAMI_SLOT
	ENDIF
NEXT
RETURNF
